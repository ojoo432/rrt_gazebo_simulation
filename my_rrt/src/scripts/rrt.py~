#!/usr/bin/python

# 2.12 Lab 5 RRT for obstacle-free trajectory planning (adapted from Steve LaValle's code)
# Peter Yu Oct 2016

import rospy
import random
from math import sqrt,cos,sin,atan2
import numpy as np
import sensor_msgs.msg
from std_msgs.msg import Float64
from me212helper.marker_helper import createLineStripMarker, createPointMarker, createSphereMarker
from visualization_msgs.msg import Marker
import tkMessageBox
from visualization_msgs.msg import MarkerArray
from geometry_msgs.msg import Point

# parameters
Z_THRESH= 0.4
EPSILON = 0.1       # (rad)
TARGET_RADIUS = 0.1  # (meter)
NUMNODES = 5000
NIter = 100000


#obstacle_segs = []  # no obstacles
STARTFLAG = 0
target_x = [5, 0]
q0 = [0.0, 0.0]
posearray = []
def dist(p1, p2):
    return sqrt((p1[0]-p2[0]) * (p1[0]-p2[0]) + (p1[1]-p2[1]) * (p1[1]-p2[1]))

def step_from_toward(p1, p2):
    if dist(p1, p2) < EPSILON:
        return p2
    else:
        theta = atan2(p2[1] - p1[1], p2[0] - p1[0])
        return p1[0] + EPSILON * cos(theta), p1[1] + EPSILON * sin(theta)

class Node:
    def __init__(self, q, parent_id = None): # q: joint position (q1, q2), x: location of the TCP (x, z)
        self.q = q
        self.parent_id = parent_id

def find_nearest_node(nodes, q):
    min_index = 0
    for i, p in enumerate(nodes):
        if dist(q, p.q) < dist(q, nodes[min_index].q):
            min_index = i
    return min_index


# trace from "node" back to the root of the tree represented by "nodes"
def backtrace(nodes, node):
    plan = []
    curr_node = node
    while True:
        plan.append(curr_node.q)
        if curr_node.parent_id is None:
            break
        curr_node = nodes[ curr_node.parent_id ]
        
    plan.reverse()
    return plan

def rrt(target_x, q0, NIter = 10000, vis_pub= None):
    global posearray
    nodes = [ Node(q0) ]
    start_x = [0.0, 0.0]
    
    if vis_pub is not None:
        vis_pub.publish(createSphereMarker(2, namespace="", pose = [target_x[0], target_x[1], 0, 0, 0, 0 ,1], rgba=(0,0,1,1), frame_id = '/base_link'))
        rospy.sleep(0.2)
        vis_pub.publish(createSphereMarker(3, namespace="", pose = [0, 0, 0, 0, 0, 0 ,1], rgba=(1,0,1,1), frame_id = '/base_link'))
        rospy.sleep(0.2)
    
    for i in xrange(NIter):
        if i % 100 == 0:
            print 'iteration:', i
            rospy.sleep(0.01)
        # pick a node in work space randomly
        #TODO
        rand_ind = random.randint(0, len(posearray))
        while(posearray[rand_ind].z!=1):
            rand_ind = random.randint(0, len(posearray))
        q_rand = [posearray[rand_ind].x, posearray[rand_ind].y]

        nearest_node_index = find_nearest_node (nodes, q_rand)
        new_q = step_from_toward(nodes[nearest_node_index].q, q_rand)
        
        #print 'new_q', new_q
        #print 'in_workspace(new_q)', in_workspace(new_q)
        #print 'in_collision(new_q)', in_collision(new_q)
        
    
        
       
        if vis_pub is not None:
            xz = new_q
            xz_old = nodes[nearest_node_index].q
            vis_pub.publish(createPointMarker([[xz[0], xz[1], 0]], i+6, namespace="", rgba=(0,1,0,1), frame_id = '/odom'))
            vis_pub.publish(createLineStripMarker([[xz_old[0], xz_old[1], 0] , [xz[0], xz[1], 0]], 
                        marker_id = i+200000, rgba = (1,0,0,1), pose=[0,0,0,0,0,0,1], frame_id = '/odom'))
            
            new_node = Node(new_q, nearest_node_index)
            nodes.append(new_node)
            
            if dist(new_q, target_x) < TARGET_RADIUS:
                plan = backtrace(nodes, new_node)
                
                return plan
    
    return None # no plan found

def cb(data):
    global STARTFLAG
    global posearray
    if STARTFLAG == 1:
        posearray = []
        for index in range(len(data.markers)):
            p = data.markers[index].points
            for ind in range(len(p)):
                if p[ind].z > Z_THRESH:
                    p[ind].z = 0
                else:
                    p[ind].z = 1
                posearray.append(p[ind])
        STARTFLAG=0

def main():
    rospy.init_node("test_rrt")
    
    # initiate publishers
    global STARTFLAG
    global posearray
    STARTFLAG = 1
    vis_pub = rospy.Publisher('visualization_marker', Marker, queue_size=100) 
    pub = rospy.Publisher('robot_pos', Marker, queue_size=100) 
    rospy.sleep(0.5)
    
    rospy.Subscriber('/occupied_cells_vis_array', MarkerArray, cb)
    #rospy.sleep(1)
    #print posearray
    
    # visualizing obstacles
    vis_pub.publish(Marker(action=3)) # delete all markers
    rospy.sleep(0.5)
  

    # back to the starting pose
    # run rrt
    print 'target_x', target_x
    print 'q0', q0
    plan = rrt(target_x = target_x, q0 = q0, NIter = NIter, vis_pub= vis_pub)
    if plan is None:
        print 'no plan found in %d iterations' % NIter
        return
    
    print 'found 1 plan', plan
    
    # execute it
    result = tkMessageBox.askquestion("RRT Plan", "A plan is found, execute?", icon='warning')

    rospy.sleep(0.1)

# if python says run, then we should run
if __name__ == '__main__':
    main()

